[git frequently used commands][git cheatsheet]

git init
git status
git add *
git commit -m "message"
	git commit -a -m "message"  ----以上2步合成一步，但是注意，这样只提交“修改过的文件”，新添加的文件，没有被tracked，必须用 git add
git checkout <tag_name>
git checkout master             ----从 tag 回到 mainline 最新的 commit
git checkout -- <filename>      ----回滚一个文件

删库：1）删除.git目录，2）删除整个 project 目录(就是包含.git目录的那个目录)
	rm -rf .git
	cd .. && rm -rf projectDir

git reset HEAD~1                ----undo 最后一次 commit
git reset HEAD                  ----undo git add *
git reset HEAD --hard           ----undo 并且同时修改当前工作区

git init prjDir                 ----指定初始仓库的名字，并创建对应目录
git init --bare prjDir.git      ----创建一个初始仓库（中心仓库），这个仓储不会有工作目录，通常用于在服务器上创建一个裸仓库。

git log -3
git log --oneline --decorate    ----#oneline 只显示 hash 和 message，decorate 会同时显示所有 references (e.g., branches, tags, etc)
git log --stat                  ----显示每个 commit 增加了多少行，删除了多少行(修改一行会被显示 增加1行+删除1行)
git log -p                      ----显示每个 commit 具体的修改内容
git log --author="<pattern>"    ----搜索指定作者的commit. <pattern>可以是正则表达式.
git log -S"Hello, World!"       ----display commits by content
git log -- <file1 file2>        ----只显示指定文件的 commits.
git shortlog -n                 ----按 author name 分组统计显示每个 user 的 commits。 默认按 author name 排序，-n 是按 commits 数量排序

git tag
git tag -l 'v1.4.2.*'
git tag -a v1.4 -m 'my version 1.4'
git show v1.4
git tag `date "+%Y-%m-%d_%H-%M-%S"`
git tag -d <tagname>      ----删除一个tag

git branch
git branch -v
git branch dev            ----创建分支
git checkout master
git merge dev
git branch -d dev
git checkout -b dev       ----创建并切换到dev分支
git switch -c dev         ----新版本的Git提供了新的git switch命令来切换分支

git remote -v
git remote set-url origin <url>
git remote add <name> <url>
git remote rm <name>
git remote rename <old-name> <new-name>

git fetch       ----从远程获取最新版本到本地，但不会自动merge。
git pull        ----可以认为是git fetch和git merge两个步骤的结合。
git fetch <远程主机名> <分支名>
	git fetch origin master	    ----如果是裸仓库，没有origin，可以先 git remote add origin <url>
git pull <远程主机名> <远程分支名>:<本地分支名>
	git pull origin master		----通常本都是省略本地分支名，表示合并同名分支

git push <远程主机名> <本地分支名>:<远程分支名>
	git push
	git push origin master

git config --global/system/local -l
git config --global -e
git config --global core.editor <editor>
git config --global core.editor "vim"
git config --global user.name <name>
git config --global user.email <email>

system config file: <git-root>/mingw64/etc/gitconfig
	$(prefix)/etc/gitconfig	----Linux
global config file: %homepath%/.gitconfig
local config file: <repo>/.git/config

git config命令		--system，--global，--local(默认写入)和--file <filename>
https://www.yiibai.com/git/git_config.html
读取时，默认情况下从系统，全局和存储库本地配置文件读取这些值，而选项--system，--global，--local和--file <filename>可用于告知命令从只有那个位置设置和读取。
写入时，默认情况下将新值写入存储库本地配置文件，并且可以使用选项--system，--global，--file <filename>来告诉命令写入该位置(可以指定为 --local，但这是默认值)。

git stash
git stash list
git stash pop           ----恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。
git stash pop --index   ----恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）
git stash pop stash@{1} ----恢复指定的进度到工作区。stash_id是通过git stash list命令得到的
git stash apply [–index] [stash_id]	----除了不删除恢复的进度之外，其余和git stash pop 命令一样。
git stash drop [stash_id]	----删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。
git stash clear	        ----删除所有存储的进度。


atlassian 的 git tutorials https://www.atlassian.com/git/tutorials
[译]Atlassian Git系列教程 https://www.cnblogs.com/irocker/p/atlassian-git-tutorials.html

一文告诉你如何导出 Git 变更文件 https://zhuanlan.zhihu.com/p/74796130
方法1，使用 git 自带命令 git archive, 语法如下。
	git archive -o c:/Users/yourusername/Desktop/export.zip NewCommitId $(git diff --name-only OldCommitId NewCommitId)
	git archive -o c:/Users/yourusername/Desktop/export.zip 479d554cf570edcc28c20ce264c6f216f8223bf3 $(git diff --name-only a838d0512e84e5eb42569cce3ef305d3ac1c44d0 479d554cf570edcc28c20ce264c6f216f8223bf3)
方法2，下载 TortoiseGit Git 客户端软件，使用方法和 svn 的 export 功能类似。




